@page "/bands/addeditband/{BandId:int?}"
@using MusicAlbumsShop.Shared.DTOs
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@attribute [StreamRendering]

<h3>@(_isEdit ? "Edit Band" : "Add Band")</h3>

<section>
    <EditForm Model=@_bandModel>

        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row mt-2">
            <label class="text-muted">Name</label>
            <InputText class="form-control" @bind-Value=_bandModel.Name />
        </div>

        <div class="row mt-2">
            <label class="text-muted">Origin</label>
            <InputText class="form-control" @bind-Value=_bandModel.Origin />
        </div>

        <div class="row mt-2">
            <label class="text-muted">Years Active</label>
            <InputText class="form-control" @bind-Value=_bandModel.YearsActive />
        </div>

        <div class="row mt-2">
            <label class="text-muted">Genre</label>
            <InputSelect class="form-select" @bind-Value=_bandModel.GenreId>
                @foreach (var g in _genresAndIds)
                {
                    <option value="@g.GenreId">@g.Name</option>
                }
            </InputSelect>
        </div>

        <button class="btn btn-primary mt-3" @onclick="SaveBand">Save</button>
    </EditForm>
</section>

@code {

    [Inject]
    private IAlertService PageAlerts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await _apiClientService.GetGenres();
        _genresAndIds = response.Value ?? new GenreWithTitle[] { };

        if (BandId != null)
        {
            var band = await _apiClientService.GetBandDetails((int)BandId);

            if (band.ErrorMessage == "Band not found.")
            {
                _isSuccess = false;
                PageAlerts.NewAlert(band.ErrorMessage, false, 3, EMessageType.Error);
            }
            else
            {
                _bandModel.Name = band.Value.Name;
                _bandModel.Origin = band.Value.Origin;
                _bandModel.YearsActive = band.Value.YearsActive;
                _bandModel.GenreId = band.Value.GenreId;
                _isSuccess = true;
            }

            _isEdit = true;

        }
        else
        {
            _bandModel.GenreId = _genresAndIds[0].GenreId;
        }
    }

    [Parameter]
    public int? BandId { get; set; }

    private bool _isEdit = false;
    private bool _isSuccess = false;
    BandDetails _bandModel = new();
    private ApiClientService _apiClientService = new ApiClientService();
    private GenreWithTitle[] _genresAndIds = new GenreWithTitle[] { };


    public async Task SaveBand()
    {
        var response = await _apiClientService.AddOrUpdateBandAsync(BandId, _bandModel.Name, _bandModel.Origin, _bandModel.YearsActive, _bandModel.GenreId);

        if (response.IsSuccess)
        {
            PageAlerts.NewAlert(_isEdit ? "Band updated successfully!" : "Band saved successfully!", false, 5, EMessageType.Success);

            ResetModel();
        }
        else
        {
            PageAlerts.NewAlert("Error. Try again.", true, EMessageType.Error);
        }

    }

    public void ResetModel()
    {
        _bandModel.Name = "";
        _bandModel.Origin = "";
        _bandModel.YearsActive = "";
        _bandModel.GenreId = _genresAndIds[0].GenreId;
    }

}
