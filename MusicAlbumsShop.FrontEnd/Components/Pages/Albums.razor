@page "/albums"
@using MusicAlbumsShop.Shared
@using MusicAlbumsShop.Shared.DTOs
@using MusicAlbumsShop.Storage
@using Microsoft.AspNetCore.Components
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h1>
    Albums
    <button class="btn btn-primary" @onclick="NavigateToAddEditAlbum"><i class="bi bi-plus-lg"></i></button>
</h1>

<body>
    <div class="container">
        <header class="header border">
            <span class="header-item"></span>
            <span class="header-item">ID</span>
            <span class="header-item">Title</span>
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Band
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <input class="dropdown-item" type="search" @bind="_bandSearchFilter" @bind:event="oninput" placeholder="Search..." />
                    </li>
                    <li class="dropdown-subitem" @onclick="@(() => GetAlbums("All"))">
                        <strong>All</strong>
                    </li>
                    @foreach (var band in GetFilteredBands())
                    {
                        <li class="dropdown-subitem" @onclick="@(() => GetAlbums(band))">
                            @((MarkupString)HighlightMatch(band, _bandSearchFilter))
                        </li>
                    }
                </ul>
            </div>
        </header>

        <section class="section p-2 border shadow">
            @foreach (var album in _albums)
            {
                <div class="section-item">
                    <div class="">
                        <button class="btn btn-primary btn-sm" @onclick="@(() => EditAlbum(album.AlbumId))"><i class="bi bi-pen"></i></button>
                        <button class="btn btn-primary btn-sm" @onclick="@(() => DeleteAlbum(album.AlbumId))"><i class="bi bi-trash"></i></button>
                    </div>
                    <div class="">
                        <span class="">@album.AlbumId</span>
                    </div>
                    <div class="">
                        <span class="">@album.AlbumTitle</span>
                    </div>
                    <div class="">
                        <span class="">@album.BandName</span>
                    </div>
                </div>
            }
        </section>
    </div>
</body>

<style>
    .container {
        display: grid;
        grid-template-areas:
            'header header header header'
            'section section section section';
        position: relative;
    }

    .header {
        grid-area: header;
        display: grid;
        grid-template-columns: 109px 50px 200px 50px;
        max-width: 520px;
    }

    .header-item {
        align-content: center;
    }

    .section {
        margin-top: 10px;
    }

    .section-item {
        grid-area: section;
        display: grid;
        grid-template-columns: 100px 50px 200px auto;
        padding: 3px;
    }

    .dropdown-subitem {
        background-color: whitesmoke;
    }

</style>


@code {
    private AlbumWithTitle[]? _albums = [];
    private string[]? _bandsFromAlbums = [];
    private string _bandSearchFilter = "";
    private ApiClientService _apiClientService = new ApiClientService();


    protected override async Task OnInitializedAsync()
    {
        //ModalService.OnModalChanged += OnModalChanged;
        await GetAlbums();

    }

    private void NavigateToAddEditAlbum()
    {
        Navigation.NavigateTo("bands/addeditband");
    }

    private async Task GetAlbums(string band = "All")
    {
        var result = await _apiClientService.GetAlbums();

        _albums = result.Value;
        _bandsFromAlbums = _albums.Select(a => a.BandName).ToArray();

        if (band != "All")
        {
            _albums = _albums.Where(a => a.BandName == band).ToArray();
        }

        
        StateHasChanged();
    }

    private IEnumerable<string> GetFilteredBands()
    {
        return _bandsFromAlbums
            .Distinct()
            .Where(b => b.Contains(_bandSearchFilter, StringComparison.CurrentCultureIgnoreCase))
            .Order();
    }

    private string HighlightMatch(string text, string filter)
    {
        if (string.IsNullOrWhiteSpace(filter))
        {
            return text;
        }

        return Regex.Replace(text, Regex.Escape(filter), m => $"<strong>{m.Value}</strong>", RegexOptions.IgnoreCase);
    }

    private async Task DeleteAlbum(int albumId)
    {
        // var album = await _apiClientService.GetBandDetails(albumId);

        // var confirmation = await ModalService.ShowConfirmation("Delete band", $"Are you sure you want to delete {album?.Value?.Name}?", "Delete", "No");

        // if (confirmation)
        // {
        //     LoadingScreenService.ShowAndHide();
        //     await _apiClientService.DeleteBand(albumId);
        //     _bands = _albums?.Where(a => a.AlbumId != albumId).ToArray();
        //     UpdateState();
        // }
    }


    private async void EditAlbum(int bandId)
    {
        // var result = await _apiClientService.GetBandDetails(bandId);
        // var band = result.Value;

        // Navigation.NavigateTo($"albums/addeditalbum/{album.BandId}");
    }

}
