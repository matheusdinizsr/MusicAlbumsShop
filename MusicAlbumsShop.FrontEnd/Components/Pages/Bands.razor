@page "/bands"
@using MusicAlbumsShop.Shared.DTOs
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Bands</PageTitle>

<h1>
    Bands
    <button class="btn btn-primary" @onclick="NavigateToAddEditBand"><i class="bi bi-plus-lg"></i></button>
</h1>

<section class="p-2 border shadow">
    @foreach (var band in _bands)
    {
        <div class="row">
            <div class="col-auto align-middle">
                <button class="btn btn-primary btn-sm" @onclick=@(() => EditBand(band.BandId))><i class="bi bi-pen"></i></button>
                <button class="btn btn-primary btn-sm" @onclick="@(() => DeleteBand(band.BandId))"><i class="bi bi-trash"></i></button>
            </div>
            <div class="col-auto align-middle">
                <span class="align-middle">@band.BandId</span>
            </div>
            <div class="col align-middle">
                <span class="align-middle">@band.Name</span>
            </div>
        </div>
    }
</section>

@* <button type="button" class="btn btn-primary" @onclick="TesteModal">Teste Modal</button> *@

<script>
    window.showModal = () => {
    const myModal = new bootstrap.Modal(document.getElementById('staticBackdrop'));
    myModal.show();
    };

    window.hideModal = () => {
    const myModal = bootstrap.Modal.getInstance(document.getElementById('staticBackdrop'));
    myModal?.hide();
    };
</script>




@code {
    [Inject]
    private IModalService PageModals { get; set; } // Alterar o nome

    private ApiClientService _apiClientService = new ApiClientService();
    private BandWithName[]? _bands = [];


    protected override async Task OnInitializedAsync()
    {
        await GetBands();
    }

    private async Task GetBands()
    {
        var result = await _apiClientService.GetBands();

        _bands = result.Value;

        StateHasChanged();
    }

    private void NavigateToAddEditBand()
    {
        Navigation.NavigateTo("bands/addeditband");
    }


    private async Task DeleteBand(int bandId)
    {
        var band = await _apiClientService.GetBandDetails(bandId);

        var confirmation = await PageModals.WaitForConfirmationAsync("Delete band", $"Are you sure you want to delete {band?.Value?.Name}?", "Delete", "No");

        if (confirmation)
        {
            await _apiClientService.DeleteBand(bandId);
            _bands = _bands?.Where(b => b.BandId != bandId).ToArray();
            StateHasChanged();
        }






        //var size = await PageModals.ShowModalWithOptions("Size", "Choose the size", ["S", "M", "L", "XL", "XXL"]);


    }


    private async void EditBand(int bandId)
    {
        var result = await _apiClientService.GetBandDetails(bandId);
        var band = result.Value;

        Navigation.NavigateTo($"bands/addeditband/{band.BandId}");
    }

}
