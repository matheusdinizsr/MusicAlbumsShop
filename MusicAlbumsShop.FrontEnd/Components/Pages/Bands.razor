@page "/bands"
@using MusicAlbumsShop.Shared.DTOs
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Bands</PageTitle>

<h1>
    Bands
    <button class="btn btn-primary" @onclick="NavigateToAddEditBand"><i class="bi bi-plus-lg"></i></button>
</h1>

<div class="row">

    <div class="col-auto align-middle">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                @_sortFilter
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" @onclick="@(() => {_sortFilter = SortOption.Name; Sort();})">Name</a></li>
                <li><a class="dropdown-item" @onclick="@(() => {_sortFilter = SortOption.ID; Sort();})">ID</a></li>
                <li><a class="dropdown-item" @onclick="@(() => {_sortFilter = SortOption.Genre; Sort();})">Genre</a></li>
            </ul>
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                @_orderFilter
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" @onclick="@(() => {_orderFilter = OrderOption.Ascending; Sort();})">Ascending ↑</a></li>
                <li><a class="dropdown-item" @onclick="@(() => {_orderFilter = OrderOption.Descending; Sort();})">Descending ↓</a></li>
            </ul>
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                @_genreFilter
            </button>
            <ul class="dropdown-menu">

                <li><a class="dropdown-item" @onclick="@(() => FilterByGenre("All"))">All</a></li>

                @foreach (var genre in _genres)
                {
                    <li><a class="dropdown-item" @onclick="@(() => FilterByGenre(genre))">@genre</a></li>
                }

            </ul>
            <input type="search" @bind="_searchFilter" @bind:event="oninput" placeholder="Search..." />
        </div>
    </div>
</div>

<section class="p-2 border shadow">

    @foreach (var band in _genreFilter == "All" ? FilteredBands : FilteredBands.Where(x => x.GenreName == _genreFilter))
    {
        <div class="row">
            <div class="col-auto align-middle">
                <button class="btn btn-primary btn-sm" @onclick="@(() => EditBand(band.BandId))"><i class="bi bi-pen"></i></button>
                <button class="btn btn-primary btn-sm" @onclick="@(() => DeleteBand(band.BandId))"><i class="bi bi-trash"></i></button>
            </div>
            <div class="col-auto align-middle">
                <span class="align-middle">@band.BandId</span>
            </div>
            <div class="col-auto align-middle">
                <span class="align-middle">@band.Name</span>
            </div>
            <div class="col-auto align-middle">
                <span class="align-middle">@band.GenreName</span>
            </div>
        </div>
    }
</section>

<script>
    window.showModal = () => {
    const myModal = new bootstrap.Modal(document.getElementById('staticBackdrop'));
    myModal.show();
    };

    window.hideModal = () => {
    const myModal = bootstrap.Modal.getInstance(document.getElementById('staticBackdrop'));
    myModal?.hide();
    };
</script>


@code {
    [Inject]
    private IModalService ModalService { get; set; }
    [Inject]
    private LoadingScreenService LoadingScreenService { get; set; }

    private ApiClientService _apiClientService = new ApiClientService();
    private BandWithNameAndGenre[]? _bands = [];
    private string[]? _genres = [];

    private string? _searchFilter;
    private string? _genreFilter = "All";
    private SortOption _sortFilter = SortOption.Name;
    private OrderOption _orderFilter = OrderOption.Ascending;

    IQueryable<BandWithNameAndGenre> FilteredBands
    {
        get
        {
            var result = _bands.AsQueryable();
            if (!string.IsNullOrEmpty(_searchFilter))
            {
                result = result.Where(b => b.Name.Contains(_searchFilter, StringComparison.CurrentCultureIgnoreCase) || b.GenreName.Contains(_searchFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }




    protected override async Task OnInitializedAsync()
    {
        ModalService.OnModalChanged += OnModalChanged;
        await GetBands();

    }

    private async void OnModalChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetBands(string genre = "")
    {
        var result = await _apiClientService.GetBands();

        _bands = result.Value;

        UpdateState();
    }

    private void GetGenresFromBands()
    {
        if (_bands != null)
        {
            _genres = _bands
                .Where(b => !string.IsNullOrWhiteSpace(b.GenreName))
                .Select(b => b.GenreName)
                .Distinct()
                .OrderBy(x => x)
                .ToArray();
        }

    }


    private void NavigateToAddEditBand()
    {
        Navigation.NavigateTo("bands/addeditband");
    }


    private async Task DeleteBand(int bandId)
    {
        var band = await _apiClientService.GetBandDetails(bandId);

        var confirmation = await ModalService.ShowConfirmation("Delete band", $"Are you sure you want to delete {band?.Value?.Name}?", "Delete", "No");

        if (confirmation)
        {
            LoadingScreenService.ShowAndHide();
            await _apiClientService.DeleteBand(bandId);
            _bands = _bands?.Where(b => b.BandId != bandId).ToArray();
            UpdateState();
        }
    }


    private async void EditBand(int bandId)
    {
        var result = await _apiClientService.GetBandDetails(bandId);
        var band = result.Value;

        Navigation.NavigateTo($"bands/addeditband/{band.BandId}");
    }


    private void FilterByGenre(string genre)
    {
        _genreFilter = genre;
    }

    private void Sort()
    {
        Func<BandWithNameAndGenre, object> keySelector = _sortFilter switch
        {
            SortOption.Name => x => x.Name,
            SortOption.ID => x => x.BandId,
            SortOption.Genre => x => x.GenreName,
            _ => x => x.Name
        };

        _bands = _orderFilter == OrderOption.Ascending
            ? _bands.OrderBy(keySelector).ToArray()
            : _bands.OrderByDescending(keySelector).ToArray();

    }

    private void UpdateState()
    {
        GetGenresFromBands();
        StateHasChanged();
    }

    public enum SortOption
    {
        Name,
        ID,
        Genre
    }

    public enum OrderOption
    {
        Ascending,
        Descending
    }


}

