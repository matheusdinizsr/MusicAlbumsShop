@rendermode InteractiveServer
@inject NavigationManager Navigation

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">@ModalService.Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @ModalService.Text
            </div>
            <div class="modal-footer">
                @foreach (var button in ModalService.ButtonsArray)
                {
                    <button type="button" class="btn btn-secondary" @onclick=@(() => Clicked(button))>@button</button>
                }
            </div>

        </div>
    </div>
</div>




@code {
    [Inject]
    public IModalService ModalService { get; set; }

    [Inject]
    IJSRuntime JS { get; set; }

    protected override void OnInitialized()
    {
        ModalService.OnModalChanged += OnModalChanged;
    }

    private async void OnModalChanged()
    {
        await InvokeAsync(StateHasChanged);

        if (ModalService.IsVisible)
        {
            await JS.InvokeVoidAsync("showModal");
        }
        else
        {
            await JS.InvokeVoidAsync("hideModal");
        }
    }


    public void Clicked(string button)
    {
       ModalService.SetPressedButton(button);
    }




}
