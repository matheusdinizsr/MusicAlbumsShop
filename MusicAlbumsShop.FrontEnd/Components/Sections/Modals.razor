@rendermode InteractiveServer
@inject NavigationManager Navigation

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">@PageModals.Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @PageModals.Text
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick=@(() => Clicked(false))>@PageModals.ButtonFalse</button>
                <button type="button" class="btn btn-primary" @onclick=@(() => Clicked(true))>@PageModals.ButtonTrue</button>
            </div>
            @foreach (var button in PageModals.ButtonsArray)
            {
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick=@(() => Clicked(false))>@button</button>
                </div>
            }
        </div>
    </div>
</div>




@code {
    [Inject]
    public IModalService PageModals { get; set; }

    [Inject]
    IJSRuntime JS { get; set; }

    protected override void OnInitialized()
    {
        PageModals.OnModalChanged += OnModalChanged;
    }

    private async void OnModalChanged()
    {
        await InvokeAsync(StateHasChanged);

        if (PageModals.IsVisible)
        {
            await JS.InvokeVoidAsync("showModal");
        }
        else
        {
            await JS.InvokeVoidAsync("hideModal");
        }
    }


    public async void Clicked(bool confirmation)
    {
        PageModals.SetConfirmation(confirmation);
    }




}
